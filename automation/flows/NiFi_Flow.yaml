process_group:
  name: NiFi Flow
  process_groups:
  - name: TrivialFlow
    description: |
      Overview: Minimal smoke-test flow that generates FlowFiles and logs attributes.
      Technical: A single GenerateFlowFile feeds a LogAttribute sink over the success relationship. The
      sink is auto-terminated. Intended to validate deploy/start/stop plumbing without controller services.
    processors:
    - id: trivial-generate
      name: Generate FlowFile
      type: org.apache.nifi.processors.standard.GenerateFlowFile
      scheduling_period: 1 min
      properties:
        Batch Size: '1'
    - id: trivial-log
      name: Log Attribute
      type: org.apache.nifi.processors.standard.LogAttribute
    connections:
    - name: Generate to Log
      source: trivial-generate
      destination: trivial-log
      relationships:
      - success
    auto_terminate:
      trivial-log:
      - success
  - name: SimpleWorkflow
    description: |
      Overview: Record-based pipeline that normalizes a field and branches on a SQL predicate.
      Technical: GenerateRecord (embedded Avro schema) emits fields 'status' and 'value'. UpdateRecord uppercases
      /status. QueryRecord evaluates two queries: 'success' routes status='OK' and 'failure' routes all others. Logs
      at both sinks. Requires JsonTreeReader and JsonRecordSetWriter controller services.
    processors:
    - id: simple-generate
      name: GenerateRecord
      type: org.apache.nifi.processors.standard.GenerateRecord
      scheduling_period: 1 min
      properties:
        record-writer: json-writer
        number-of-records: '1'
        nullable-fields: 'false'
        null-percentage: '0.0'
        schema-text: "{\n  \"type\": \"record\",\n  \"name\": \"test\",\n  \"fields\"\
          : [\n    { \"name\": \"status\", \"type\": \"string\" },\n    { \"name\"\
          : \"value\", \"type\": \"int\" }\n  ]\n}\n"
    - id: simple-update
      name: UpdateRecord
      type: org.apache.nifi.processors.standard.UpdateRecord
      properties:
        Record Reader: json-reader
        Record Writer: json-writer
        /status: UPPER(/status)
    - id: simple-query
      name: QueryRecord
      type: org.apache.nifi.processors.standard.QueryRecord
      properties:
        record-reader: json-reader
        record-writer: json-writer
        success: SELECT * FROM FLOWFILE WHERE status = 'OK'
        failure: SELECT * FROM FLOWFILE WHERE status <> 'OK'
    - id: simple-log-success
      name: LogAttribute (Success)
      type: org.apache.nifi.processors.standard.LogAttribute
    - id: simple-log-failure
      name: LogAttribute (Failure)
      type: org.apache.nifi.processors.standard.LogAttribute
    connections:
    - name: Generate to Update
      source: simple-generate
      destination: simple-update
      relationships:
      - success
    - name: Update to Query
      source: simple-update
      destination: simple-query
      relationships:
      - success
    - name: Query to Log Success
      source: simple-query
      destination: simple-log-success
      relationships:
      - success
    - name: Query to Log Failure
      source: simple-query
      destination: simple-log-failure
      relationships:
      - failure
    auto_terminate:
      simple-log-success:
      - success
      simple-log-failure:
      - success
  - name: MediumWorkflow
    description: |
      Overview: Attribute-based routing with RouteOnAttribute to demonstrate branching without record processors.
      Technical: GenerateFlowFile emits a FlowFile and an attribute (route=success). RouteOnAttribute defines a
      'success' property using NiFi Expression Language to evaluate the attribute. Success goes to a log; unmatched
      and failure go to a separate log.
    processors:
    - id: medium-generate
      name: Generate FlowFile (Medium)
      type: org.apache.nifi.processors.standard.GenerateFlowFile
      scheduling_period: 1 min
      properties:
        Batch Size: '1'
        Data Format: Text
        Custom Text: route=success
    - id: medium-route
      name: Route On Attribute
      type: org.apache.nifi.processors.standard.RouteOnAttribute
      properties:
        success: ${route:equals('success')}
    - id: medium-log-success
      name: LogAttribute (Medium Success)
      type: org.apache.nifi.processors.standard.LogAttribute
    - id: medium-log-failure
      name: LogAttribute (Medium Failure)
      type: org.apache.nifi.processors.standard.LogAttribute
    connections:
    - name: Medium Generate to Route
      source: medium-generate
      destination: medium-route
      relationships:
      - success
    - name: Medium Route to Success
      source: medium-route
      destination: medium-log-success
      relationships:
      - success
    - name: Medium Route to Failure
      source: medium-route
      destination: medium-log-failure
      relationships:
      - unmatched
      - failure
    auto_terminate:
      medium-log-success:
      - success
      medium-log-failure:
      - success
  - name: ComplexWorkflow
    description: |
      Overview: Record-generation, enrichment, and classification into high/low streams using QueryRecord.
      Technical: GenerateRecord emits fields sensor, reading_value, and status. UpdateRecord normalizes status and
      fills missing sensor. QueryRecord defines 'high' and 'low' queries to split by a threshold. Failure is routed
      to a dedicated log. Requires JsonTreeReader and JsonRecordSetWriter controller services.
    processors:
    - id: complex-generate
      name: GenerateRecord (Complex)
      type: org.apache.nifi.processors.standard.GenerateRecord
      scheduling_period: 1 min
      properties:
        record-writer: json-writer
        number-of-records: '1'
        nullable-fields: 'false'
        null-percentage: '0.0'
        schema-text: "{\n  \"type\": \"record\",\n  \"name\": \"reading\",\n  \"fields\"\
          : [\n    { \"name\": \"sensor\", \"type\": \"string\" },\n    { \"name\"\
          : \"reading_value\", \"type\": \"double\" },\n    { \"name\": \"status\"\
          , \"type\": \"string\" }\n  ]\n}\n"
    - id: complex-update
      name: UpdateRecord (Complex)
      type: org.apache.nifi.processors.standard.UpdateRecord
      properties:
        Record Reader: json-reader
        Record Writer: json-writer
        /status: UPPER(/status)
        /sensor: COALESCE(/sensor, 'unknown')
    - id: complex-query
      name: QueryRecord (Complex)
      type: org.apache.nifi.processors.standard.QueryRecord
      properties:
        record-reader: json-reader
        record-writer: json-writer
        high: SELECT * FROM FLOWFILE WHERE reading_value >= 50
        low: SELECT * FROM FLOWFILE WHERE reading_value < 50
    - id: complex-log-high
      name: LogAttribute (High)
      type: org.apache.nifi.processors.standard.LogAttribute
    - id: complex-log-low
      name: LogAttribute (Low)
      type: org.apache.nifi.processors.standard.LogAttribute
    - id: complex-log-failure
      name: LogAttribute (Complex Failure)
      type: org.apache.nifi.processors.standard.LogAttribute
    connections:
    - name: Complex Generate to Update
      source: complex-generate
      destination: complex-update
      relationships:
      - success
    - name: Complex Update to Query
      source: complex-update
      destination: complex-query
      relationships:
      - success
    - name: Complex Query to High Log
      source: complex-query
      destination: complex-log-high
      relationships:
      - high
    - name: Complex Query to Low Log
      source: complex-query
      destination: complex-log-low
      relationships:
      - low
    - name: Complex Query to Failure Log
      source: complex-query
      destination: complex-log-failure
      relationships:
      - failure
    auto_terminate:
      complex-log-high:
      - success
      complex-log-low:
      - success
      complex-log-failure:
      - success
  - name: NestedWorkflow
    description: |
      Overview: Demonstrates a nested process group without ports.
      Technical: Parent group contains a single child group 'SubFunction' with GenerateFlowFile feeding LogAttribute.
      Tests nested creation, layout, and teardown sequencing during purge.
    processors: []
    process_groups:
    - name: SubFunction
      processors:
      - id: nested-sub-generate
        name: Generate FlowFile (Sub)
        type: org.apache.nifi.processors.standard.GenerateFlowFile
        scheduling_period: 1 min
        properties:
          Batch Size: '1'
      - id: nested-sub-log
        name: LogAttribute (Sub)
        type: org.apache.nifi.processors.standard.LogAttribute
      connections:
      - name: Sub Generate to Log
        source: nested-sub-generate
        destination: nested-sub-log
        relationships:
        - success
      auto_terminate:
        nested-sub-log:
        - success
  - name: NestedPortsWorkflow
    description: |
      Overview: Demonstrates child process group ports and cross-boundary connections.
      Technical: Parent GenerateFlowFile connects to the child's input port; inside the child, a LogAttribute emits
      to the child's output port; the parent connects from that output port to a result logger. Validates port
      creation, wiring, and layout without overlap between parent processors and child PG.
    processors:
    - id: nested-source
      name: Nested Source
      type: org.apache.nifi.processors.standard.GenerateFlowFile
      scheduling_period: 1 min
      properties:
        Batch Size: '1'
        Data Format: Text
        Custom Text: nested payload
    - id: nested-result-log
      name: Nested Result Logger
      type: org.apache.nifi.processors.standard.LogAttribute
    process_groups:
    - name: NestedPortsSubflow
      input_ports:
      - id: nested-sub-in
        name: Nested Sub In
      output_ports:
      - id: nested-sub-out
        name: Nested Sub Out
      processors:
      - id: nested-sub-log
        name: LogAttribute (Nested Sub)
        type: org.apache.nifi.processors.standard.LogAttribute
      connections:
      - name: Sub In to Log
        source: nested-sub-in
        destination: nested-sub-log
        relationships: []
      - name: Sub Log to Out
        source: nested-sub-log
        destination: nested-sub-out
        relationships:
        - success
    connections:
    - name: Source to Subflow
      source: nested-source
      destination: nested-sub-in
      relationships:
      - success
    - name: Subflow to Result
      source: nested-sub-out
      destination: nested-result-log
      relationships: []
    auto_terminate:
      nested-result-log:
      - success
  - name: PathBranchWorkflow
    description: |
      Overview: Attribute-based branching using RouteOnAttribute with 'east' and 'west' routes plus unmatched.
      Technical: Generate sets 'route' attribute; RouteOnAttribute defines properties 'east' and 'west' with NiFi
      expression-language predicates; sinks are auto-terminated. Layout is router-centered with sinks stacked right.
    processors:
    - id: path-generate
      name: Generate FlowFile (with route)
      type: org.apache.nifi.processors.standard.GenerateFlowFile
      scheduling_period: 1 min
      properties:
        Batch Size: '1'
        Data Format: Text
        Custom Text: example payload
        route: east
    - id: path-route
      name: Route On Attribute (path)
      type: org.apache.nifi.processors.standard.RouteOnAttribute
      properties:
        east: ${route:equals('east')}
        west: ${route:equals('west')}
    - id: path-log-east
      name: LogAttribute (east)
      type: org.apache.nifi.processors.standard.LogAttribute
    - id: path-log-west
      name: LogAttribute (west)
      type: org.apache.nifi.processors.standard.LogAttribute
    - id: path-log-unmatched
      name: LogAttribute (unmatched)
      type: org.apache.nifi.processors.standard.LogAttribute
    connections:
    - name: Generate to Route
      source: path-generate
      destination: path-route
      relationships:
      - success
    - name: Route to East
      source: path-route
      destination: path-log-east
      relationships:
      - east
    - name: Route to West
      source: path-route
      destination: path-log-west
      relationships:
      - west
    - name: Route to Unmatched/Failure
      source: path-route
      destination: path-log-unmatched
      relationships:
      - unmatched
      - failure
    auto_terminate:
      path-log-east:
      - success
      path-log-west:
      - success
      path-log-unmatched:
      - success
  - name: SplitMergeWorkflow
    description: |
      Overview: Demonstrates record batch fan-out and fan-in using SplitRecord and MergeRecord.
      Technical: GenerateRecord emits 9 records; SplitRecord creates 3 splits of 3 records each via the
      'Records Per Split' property; MergeRecord consumes the splits and emits a single 3-record FlowFile per group
      using 'Minimum/Maximum Number of Records'. Original and merged outputs are logged via dedicated sinks.
    processors:
    - id: sm-generate
      name: Generate Records (batch)
      type: org.apache.nifi.processors.standard.GenerateRecord
      scheduling_period: 1 min
      properties:
        record-writer: json-writer
        number-of-records: '9'
        nullable-fields: 'false'
        null-percentage: '0.0'
        schema-text: |
          {
            "type": "record",
            "name": "reading",
            "fields": [
              { "name": "sensor", "type": "string" },
              { "name": "value",  "type": "int" }
            ]
          }
    - id: sm-split
      name: SplitRecord (3 per)
      type: org.apache.nifi.processors.standard.SplitRecord
      properties:
        Record Reader: json-reader
        Record Writer: json-writer
        Records Per Split: '3'
    - id: sm-merge
      name: MergeRecord (3)
      type: org.apache.nifi.processors.standard.MergeRecord
      properties:
        Record Reader: json-reader
        Record Writer: json-writer
        Minimum Number of Records: '3'
        Maximum Number of Records: '3'
    - id: sm-log-original
      name: LogAttribute (original)
      type: org.apache.nifi.processors.standard.LogAttribute
    - id: sm-log-merged
      name: LogAttribute (merged)
      type: org.apache.nifi.processors.standard.LogAttribute
    connections:
    - name: Generate to Split
      source: sm-generate
      destination: sm-split
      relationships:
      - success
    - name: Split to Merge
      source: sm-split
      destination: sm-merge
      relationships:
      - splits
    - name: Split original to Log
      source: sm-split
      destination: sm-log-original
      relationships:
      - original
    - name: Merge to Log
      source: sm-merge
      destination: sm-log-merged
      relationships:
      - merged
    auto_terminate:
      sm-log-original:
      - success
      sm-log-merged:
      - success
  - name: ContentAttributeRouteWorkflow
    description: |
      Overview: Builds minimal JSON from attributes and routes content using a regex-based RouteOnContent.
      Technical: UpdateAttribute sets 'status' and 'message'; AttributesToJSON writes them into the FlowFile content
      (Destination=flowfile-content). RouteOnContent exposes a dynamic 'ok' relationship matching status=OK; all
      other cases go to unmatched/failure and are logged. This avoids external systems while exercising content routing.
    processors:
    - id: car-generate
      name: Generate FlowFile
      type: org.apache.nifi.processors.standard.GenerateFlowFile
      scheduling_period: 1 min
      properties:
        Batch Size: '1'
        Data Format: Text
        Custom Text: '{}'
    - id: car-update
      name: UpdateAttribute (status/message)
      type: org.apache.nifi.processors.attributes.UpdateAttribute
      properties:
        status: ok
        message: hello
    - id: car-to-json
      name: AttributesToJSON (to content)
      type: org.apache.nifi.processors.standard.AttributesToJSON
      properties:
        Destination: flowfile-content
        Include Core Attributes: 'false'
        Attributes List: status,message
    - id: car-route
      name: RouteOnContent (status OK)
      type: org.apache.nifi.processors.standard.RouteOnContent
      properties:
        ok: '(?s).*"status"\s*:\s*"OK".*'
    - id: car-log-ok
      name: LogAttribute (OK)
      type: org.apache.nifi.processors.standard.LogAttribute
    - id: car-log-other
      name: LogAttribute (Other)
      type: org.apache.nifi.processors.standard.LogAttribute
    connections:
    - name: Generate to Update
      source: car-generate
      destination: car-update
      relationships:
      - success
    - name: AttributesToJSON
      source: car-update
      destination: car-to-json
      relationships:
      - success
    - name: JSON to Route
      source: car-to-json
      destination: car-route
      relationships:
      - success
    - name: Route to OK
      source: car-route
      destination: car-log-ok
      relationships:
      - ok
    - name: Route to Other
      source: car-route
      destination: car-log-other
      relationships:
      - unmatched
      - failure
    auto_terminate:
      car-log-ok:
      - success
      car-log-other:
      - success
  - name: HttpServerWorkflow
    description: |
      Overview: Exposes a minimal HTTP endpoint inside NiFi using HandleHttpRequest/HandleHttpResponse.
      Technical: HandleHttpRequest listens on port 18081 and hands off a FlowFile; HandleHttpResponse returns 204 with
      Content-Type header. Failure routes to a log. Demonstrates request/response correlation within a single PG without
      external systems.
    processors:
    - id: http-request
      name: HandleHttpRequest
      type: org.apache.nifi.processors.standard.HandleHttpRequest
      properties:
        Listening Port: '18081'
        HTTP Context Map: http-context-map
    - id: http-response
      name: HandleHttpResponse
      type: org.apache.nifi.processors.standard.HandleHttpResponse
      properties:
        HTTP Status Code: '204'
        Content-Type: text/plain
        HTTP Context Map: http-context-map
    connections:
    - name: Request to Response
      source: http-request
      destination: http-response
      relationships:
      - success
    auto_terminate: {}
  - name: TwoBranchWorkflow
    description: |
      Overview: Splits content and routes into two parallel branches based on fragment index parity.
      Technical: GenerateFlowFile emits multi-line text; SplitText splits into single-line FlowFiles (fragment.index set).
      RouteOnAttribute sends even indices to Branch A and odd indices to Branch B using Expression Language modulo tests.
      Each branch logs independently. Demonstrates multi-branch fan-out.
    processors:
    - id: tb-generate
      name: Generate FlowFile (multiline)
      type: org.apache.nifi.processors.standard.GenerateFlowFile
      properties:
        Batch Size: '1'
        Data Format: Text
        Custom Text: |
          one
          two
          three
          four
    - id: tb-split
      name: SplitText (1 line)
      type: org.apache.nifi.processors.standard.SplitText
      properties:
        Line Split Count: '1'
        Remove Trailing Newlines: 'true'
    - id: tb-route
      name: RouteOnAttribute (even/odd)
      type: org.apache.nifi.processors.standard.RouteOnAttribute
      properties:
        branchA: "${fragment.index:mod(2):equals(0)}"
        branchB: "${fragment.index:mod(2):equals(1)}"
    - id: tb-logA
      name: LogAttribute (A)
      type: org.apache.nifi.processors.standard.LogAttribute
    - id: tb-logB
      name: LogAttribute (B)
      type: org.apache.nifi.processors.standard.LogAttribute
    connections:
    - name: Generate to Split
      source: tb-generate
      destination: tb-split
      relationships:
      - success
    - name: Split to Route
      source: tb-split
      destination: tb-route
      relationships:
      - splits
    - name: Route to A
      source: tb-route
      destination: tb-logA
      relationships:
      - branchA
    - name: Route to B
      source: tb-route
      destination: tb-logB
      relationships:
      - branchB
    auto_terminate:
      tb-logA:
      - success
      tb-logB:
      - success
