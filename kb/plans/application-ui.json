{
  "version": "1",
  "generated_at": "2025-10-18T16:00:00Z",
  "repo_root": ".",
  "scope": "application",
  "application": {
    "id": "application-ui",
    "name": "NiFi Web Console",
    "kind": "application",
    "entrypoints": [
      "nifi-frontend/src/main/frontend/apps/nifi/",
      "nifi-frontend/src/main/frontend/package.json",
      "nifi-frontend/src/main/frontend/nx.json"
    ],
    "artifacts": [
      "nifi-frontend/src/main/frontend/apps/nifi/project.json",
      "nifi-frontend/target/",
      "nifi-assembly/src/main/assembly/"
    ]
  },
  "topics": [
    {
      "id": "ui-overview-and-build",
      "title": "UI Overview and Build",
      "summary": "Describe the purpose of the web console, technology stack, and how to build the application with Nx.",
      "category": "development",
      "recommended_sources": [
        "nifi-frontend/src/main/frontend/apps/nifi/",
        "nifi-frontend/src/main/frontend/package.json",
        "README.md"
      ],
      "dependencies": [],
      "priority": "high",
      "tags": ["overview", "build", "nx"],
      "research_request": "Document the NiFi web console stack and build steps using Nx scripts."
    },
    {
      "id": "project-structure",
      "title": "Project Structure",
      "summary": "Explain the application module layout, shared libraries, and project configuration files.",
      "category": "architecture",
      "recommended_sources": [
        "nifi-frontend/src/main/frontend/apps/nifi/src/",
        "nifi-frontend/src/main/frontend/libs/shared/",
        "nifi-frontend/src/main/frontend/nx.json"
      ],
      "dependencies": [],
      "priority": "high",
      "tags": ["structure", "modules", "architecture"],
      "research_request": "Describe the NiFi UI project structure including shared libraries and Nx project configuration."
    },
    {
      "id": "data-fetching-and-api-integration",
      "title": "Data Fetching and API Integration",
      "summary": "Detail how the UI communicates with backend APIs, including client utilities and error handling.",
      "category": "development",
      "recommended_sources": [
        "nifi-frontend/src/main/frontend/apps/nifi/src/app/",
        "nifi-frontend/src/main/frontend/libs/shared/",
        "nifi-framework-bundle/nifi-framework/nifi-web/"
      ],
      "dependencies": [],
      "priority": "high",
      "tags": ["api", "http", "integration"],
      "research_request": "Explain API integration patterns within the NiFi web console, highlighting key services and error handling."
    },
    {
      "id": "state-management",
      "title": "State Management",
      "summary": "Describe state management patterns, stores, and how UI components share runtime data.",
      "category": "architecture",
      "recommended_sources": [
        "nifi-frontend/src/main/frontend/apps/nifi/src/app/",
        "nifi-frontend/src/main/frontend/libs/shared/",
        "docs/design-log.md"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["state", "architecture", "frontend"],
      "research_request": "Document state management strategies used by the NiFi UI and associated supporting libraries."
    },
    {
      "id": "authentication-flows",
      "title": "Authentication Flows",
      "summary": "Explain how the UI handles login, session management, and single sign-on integrations.",
      "category": "security",
      "recommended_sources": [
        "nifi-frontend/src/main/frontend/apps/nifi/src/app/",
        "nifi-frontend/src/main/frontend/libs/shared/",
        "nifi-docs/src/main/asciidoc/administration-guide.adoc"
      ],
      "dependencies": [],
      "priority": "high",
      "tags": ["authentication", "session", "security"],
      "research_request": "Describe NiFi UI authentication flows and how sessions are managed within the frontend."
    },
    {
      "id": "authorization-ux",
      "title": "Authorization UX",
      "summary": "Describe how access policies affect UI rendering, feature gating, and admin workflows.",
      "category": "ui",
      "recommended_sources": [
        "nifi-frontend/src/main/frontend/apps/nifi/src/app/",
        "nifi-framework-bundle/nifi-framework/nifi-framework-authorization/",
        "nifi-docs/src/main/asciidoc/user-guide.adoc"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["authorization", "ui", "policies"],
      "research_request": "Explain how authorization policies influence the NiFi UI, including conditional rendering and admin tools."
    },
    {
      "id": "styling-and-theming",
      "title": "Styling and Theming",
      "summary": "Explain styling approach, Tailwind configuration, and customization options for branding.",
      "category": "ui",
      "recommended_sources": [
        "nifi-frontend/src/main/frontend/apps/nifi/tailwind.config.js",
        "nifi-frontend/src/main/frontend/apps/nifi/src/styles.scss",
        "nifi-frontend/src/main/frontend/libs/shared/"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["styling", "tailwind", "theme"],
      "research_request": "Document styling conventions and theming options for the NiFi web console."
    },
    {
      "id": "accessibility-and-i18n",
      "title": "Accessibility and Internationalization",
      "summary": "Detail accessibility considerations, ARIA usage, and localization support in the UI.",
      "category": "ui",
      "recommended_sources": [
        "nifi-frontend/src/main/frontend/apps/nifi/src/app/",
        "nifi-frontend/src/main/frontend/libs/shared/",
        "nifi-docs/src/main/asciidoc/user-guide.adoc"
      ],
      "dependencies": [],
      "priority": "low",
      "tags": ["accessibility", "i18n", "ui"],
      "research_request": "Explain accessibility practices and internationalization support implemented in the NiFi UI."
    },
    {
      "id": "dev-environment-and-tooling",
      "title": "Dev Environment and Tooling",
      "summary": "Describe local development workflow, Nx targets, hot reload, and proxy configuration.",
      "category": "development",
      "recommended_sources": [
        "nifi-frontend/src/main/frontend/apps/nifi/project.json",
        "nifi-frontend/src/main/frontend/proxy.config.mjs",
        "nifi-frontend/src/main/frontend/package.json"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["development", "tooling", "proxy"],
      "research_request": "Document local development workflow for the NiFi UI including Nx targets and proxy setup."
    },
    {
      "id": "testing-strategy",
      "title": "Testing Strategy",
      "summary": "Detail unit, integration, and end-to-end testing tools configured for the UI project.",
      "category": "testing",
      "recommended_sources": [
        "nifi-frontend/src/main/frontend/apps/nifi/jest.config.ts",
        "nifi-frontend/src/main/frontend/apps/nifi/setup-jest.ts",
        "nifi-frontend/src/main/frontend/libs/shared/"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["testing", "jest", "frontend"],
      "research_request": "Explain the testing approach for the NiFi UI including Jest configuration and shared test utilities."
    },
    {
      "id": "build-and-deployment",
      "title": "Build and Deployment",
      "summary": "Summarize production build targets, output artifacts, and integration with NiFi packaging.",
      "category": "deployment",
      "recommended_sources": [
        "nifi-frontend/src/main/frontend/apps/nifi/project.json",
        "nifi-frontend/target/",
        "nifi-assembly/src/main/assembly/"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["build", "deployment", "artifacts"],
      "research_request": "Document how the NiFi UI is built for production and bundled into NiFi distributions."
    },
    {
      "id": "runtime-observability-ui",
      "title": "Runtime Observability UI",
      "summary": "Explain how the UI surfaces metrics, provenance, and alerts for operators.",
      "category": "operations",
      "recommended_sources": [
        "nifi-frontend/src/main/frontend/apps/nifi/src/app/",
        "nifi-docs/src/main/asciidoc/user-guide.adoc",
        "docs/design-log.md"
      ],
      "dependencies": [],
      "priority": "low",
      "tags": ["observability", "ui", "monitoring"],
      "research_request": "Describe UI components that present NiFi observability data and how they interact with backend APIs."
    },
    {
      "id": "error-handling-and-notifications",
      "title": "Error Handling and Notifications",
      "summary": "Detail UI mechanisms for surfacing errors, banners, and operator notifications.",
      "category": "ui",
      "recommended_sources": [
        "nifi-frontend/src/main/frontend/apps/nifi/src/app/",
        "nifi-frontend/src/main/frontend/libs/shared/",
        "nifi-docs/src/main/asciidoc/user-guide.adoc"
      ],
      "dependencies": [],
      "priority": "low",
      "tags": ["error", "notifications", "ui"],
      "research_request": "Explain how the NiFi UI handles error messaging, alerts, and operator notifications."
    }
  ]
}
