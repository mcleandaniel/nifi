{
  "version": "1",
  "generated_at": "2025-10-19T07:19:09Z",
  "repo_root": ".",
  "scope": "application",
  "topics": [
    {
      "id": "application-ui-frontend-architecture",
      "title": "Frontend Workspace Architecture",
      "summary": "Describe the Nx workspace layout, application boundaries, and shared libraries that compose the NiFi UI.",
      "category": "architecture",
      "recommended_sources": ["nifi-frontend/src/main/frontend/README.md", "nifi-frontend/src/main/frontend/apps/nifi/"],
      "priority": "high",
      "tags": ["frontend", "architecture", "nx"],
      "research_request": "Outline workspace structure, module boundaries, and how legacy UIs are staged for modernization."
    },
    {
      "id": "application-ui-state-management",
      "title": "NgRx State Management Patterns",
      "summary": "Explain how NgRx stores, selectors, and effects are organized across global and feature scopes.",
      "category": "development",
      "recommended_sources": ["nifi-frontend/src/main/frontend/apps/nifi/src/app/state/"],
      "priority": "high",
      "tags": ["ngrx", "state", "redux"],
      "research_request": "Document store modules, lazy loading strategy, and guidelines for adding new state slices."
    },
    {
      "id": "application-ui-rest-integrations",
      "title": "REST Integration Layer",
      "summary": "Describe HTTP interceptors, services, and API clients that connect the UI to NiFi backends.",
      "category": "integration",
      "recommended_sources": ["nifi-frontend/src/main/frontend/apps/nifi/src/app/service/", "nifi-frontend/src/main/frontend/apps/nifi/src/app/service/interceptors/"] ,
      "priority": "medium",
      "tags": ["rest", "http", "integration"],
      "research_request": "Explain request pipelines, error handling, and authentication token reuse across services."
    },
    {
      "id": "application-ui-build-tooling",
      "title": "Build and Task Orchestration",
      "summary": "Summarize build commands, executors, and lint/test tooling used for the frontend workspace.",
      "category": "development",
      "recommended_sources": ["nifi-frontend/src/main/frontend/package.json", "nifi-frontend/src/main/frontend/nx.json", "nifi-frontend/src/main/frontend/apps/nifi/project.json"],
      "priority": "medium",
      "tags": ["build", "tooling", "nx"],
      "research_request": "Document configured Nx targets, npm scripts, and how they integrate with CI pipelines."
    },
    {
      "id": "application-ui-testing-strategy",
      "title": "Testing and Quality Gates",
      "summary": "Explain unit testing, coverage, and linting strategy for the UI codebase.",
      "category": "quality",
      "recommended_sources": ["nifi-frontend/src/main/frontend/apps/nifi/jest.config.ts", "nifi-frontend/src/main/frontend/jest.preset.js"],
      "priority": "medium",
      "tags": ["testing", "jest", "quality"],
      "research_request": "Detail test setup, coverage expectations, and how Nx orchestrates lint and test tasks."
    },
    {
      "id": "application-ui-styling-system",
      "title": "Styling and Asset Pipeline",
      "summary": "Describe global styling, SCSS usage, and how shared assets are managed across applications.",
      "category": "design",
      "recommended_sources": ["nifi-frontend/src/main/frontend/apps/nifi/src/styles.scss", "nifi-frontend/src/main/frontend/libs/shared/"] ,
      "priority": "low",
      "tags": ["scss", "styling", "assets"],
      "research_request": "Summarize styling conventions, shared component styling, and asset bundling."
    },
    {
      "id": "application-ui-module-ecosystem",
      "title": "Supporting UI Modules",
      "summary": "Inventory auxiliary applications such as Jolt Transform, Registry UI, and content viewers within the workspace.",
      "category": "architecture",
      "recommended_sources": ["nifi-frontend/src/main/frontend/apps/nifi-jolt-transform-ui/", "nifi-frontend/src/main/frontend/apps/standard-content-viewer/", "nifi-frontend/src/main/frontend/apps/nifi-registry/"] ,
      "priority": "medium",
      "tags": ["modules", "microfrontend", "workspace"],
      "research_request": "Describe responsibilities of each auxiliary app and how they integrate with the primary NiFi UI."
    },
    {
      "id": "application-ui-routing-shell",
      "title": "Routing and Shell Navigation",
      "summary": "Explain the routing configuration, lazy loading, and feature shell structure for the main UI.",
      "category": "development",
      "recommended_sources": ["nifi-frontend/src/main/frontend/apps/nifi/src/app/pages/", "nifi-frontend/src/main/frontend/apps/nifi/src/app/service/guard/"] ,
      "priority": "medium",
      "tags": ["routing", "navigation", "angular"],
      "research_request": "Detail router modules, guard usage, and how navigation ties into state management."
    },
    {
      "id": "application-ui-authentication-flow",
      "title": "Authentication and Session Handling",
      "summary": "Describe login flows, token persistence, and session timeout handling in the UI.",
      "category": "security",
      "recommended_sources": ["nifi-frontend/src/main/frontend/apps/nifi/src/app/pages/login/", "nifi-frontend/src/main/frontend/apps/nifi/src/app/state/current-user/"] ,
      "priority": "high",
      "tags": ["authentication", "session", "security"],
      "research_request": "Explain login UX, cookie usage, and how authenticated state is shared across modules."
    },
    {
      "id": "application-ui-deployment-builds",
      "title": "Frontend Build Outputs and Deployment",
      "summary": "Detail build outputs, bundling, and deployment integration with the NiFi server distribution.",
      "category": "deployment",
      "recommended_sources": ["nifi-frontend/src/main/frontend/apps/nifi/project.json", "nifi-frontend/pom.xml"],
      "priority": "low",
      "tags": ["deployment", "build", "bundling"],
      "research_request": "Describe production build configuration, asset hashing, and how artifacts move into NiFi assemblies."
    }
  ]
}
