{
  "version": "1",
  "generated_at": "2025-10-19T07:19:09Z",
  "repo_root": ".",
  "scope": "project",
  "topics": [
    {
      "id": "project-architecture-overview",
      "title": "End-to-End NiFi Platform Architecture",
      "summary": "Describe how Apache NiFi services, registries, agents, and tooling compose the overall dataflow platform and how deployments are structured.",
      "category": "architecture",
      "recommended_sources": ["nifi-docs/src/main/asciidoc/overview.adoc", "nifi-docs/src/main/asciidoc/nifi-in-depth.adoc"],
      "priority": "high",
      "tags": ["architecture", "platform", "overview"],
      "research_request": "Outline the major platform tiers, core components, and deployment topologies described in the overview and in-depth guides."
    },
    {
      "id": "project-core-runtime-scheduler",
      "title": "Flow Runtime Scheduling Mechanics",
      "summary": "Detail how the core runtime schedules processors, handles backpressure, and coordinates threads for dataflow execution.",
      "category": "architecture",
      "recommended_sources": ["nifi-framework-bundle/nifi-framework/nifi-runtime/", "nifi-framework-bundle/nifi-framework/nifi-framework-core/"],
      "priority": "high",
      "tags": ["runtime", "scheduling", "flow"],
      "research_request": "Explain scheduling strategies, prioritizers, and lifecycle hooks the runtime exposes for processors."
    },
    {
      "id": "project-flowfile-repository",
      "title": "FlowFile Repository Architecture",
      "summary": "Summarize FlowFile storage design, serialization formats, and recovery behavior across repository implementations.",
      "category": "storage",
      "recommended_sources": ["nifi-framework-bundle/nifi-framework/nifi-flowfile-repo-serialization/", "nifi-commons/nifi-flowfile-packager/"],
      "priority": "high",
      "tags": ["flowfile", "repository", "storage"],
      "research_request": "Document repository layouts, swap mechanics, and guidance for tuning FlowFile persistence."
    },
    {
      "id": "project-provenance-repository",
      "title": "Data Provenance Storage and Retention",
      "summary": "Explain provenance repository formats, configuration knobs, and how operators balance durability, retention, and performance.",
      "category": "operations",
      "recommended_sources": ["nifi-framework-bundle/nifi-framework-extensions/nifi-provenance-repository-bundle/", "nifi-docs/src/main/asciidoc/administration-guide.adoc"],
      "priority": "high",
      "tags": ["provenance", "repository", "operations"],
      "research_request": "Clarify persistent versus volatile provenance options and provide retention tuning guidelines."
    },
    {
      "id": "project-extension-bundle-landscape",
      "title": "NiFi Extension Bundle Catalog",
      "summary": "Inventory the published processor, service, and reporting bundles and how they are organized for build and deployment.",
      "category": "extensibility",
      "recommended_sources": ["nifi-extension-bundles/", "docs/components/processors-implemented.md"],
      "priority": "high",
      "tags": ["extensions", "nar", "catalog"],
      "research_request": "Map major bundle families, their packaging, and the documentation used to track supported components."
    },
    {
      "id": "project-python-extension-sdk",
      "title": "Python Processor Integration Path",
      "summary": "Describe how the Py4J bundle enables Python processors and what developers must implement to package them.",
      "category": "extensibility",
      "recommended_sources": ["nifi-extension-bundles/nifi-py4j-extension-bundle/", "nifi-docs/src/main/asciidoc/python-developer-guide.adoc"],
      "priority": "medium",
      "tags": ["python", "processors", "sdk"],
      "research_request": "Outline project structure, build steps, and runtime constraints for Python-based extensions."
    },
    {
      "id": "project-stateless-engine-alignment",
      "title": "NiFi Stateless Engine Strategy",
      "summary": "Summarize the stateless engine modules and how they align with core NiFi deployments for serverless workloads.",
      "category": "architecture",
      "recommended_sources": ["nifi-stateless/", "nifi-docs/src/main/asciidoc/developer-guide.adoc"],
      "priority": "medium",
      "tags": ["stateless", "serverless", "architecture"],
      "research_request": "Explain bootstrap, resource packaging, and orchestration considerations for stateless execution."
    },
    {
      "id": "project-site-to-site-protocol",
      "title": "Site-to-Site Data Movement",
      "summary": "Detail how Site-to-Site transports data between NiFi instances and external agents, including protocol and client libraries.",
      "category": "integration",
      "recommended_sources": ["nifi-framework-bundle/nifi-framework/nifi-site-to-site/", "nifi-commons/nifi-site-to-site-client/"],
      "priority": "high",
      "tags": ["site-to-site", "integration", "protocol"],
      "research_request": "Capture handshake flows, security controls, and tuning guidance for Site-to-Site communications."
    },
    {
      "id": "project-rest-api-contracts",
      "title": "REST API Contract Surface",
      "summary": "Catalog the primary REST resources, DTOs, and versioning conventions that NiFi exposes to automation clients.",
      "category": "integration",
      "recommended_sources": ["nifi-framework-api/", "nifi-server-api/"],
      "priority": "high",
      "tags": ["rest", "api", "contracts"],
      "research_request": "Map endpoints to DTO definitions and note stability guarantees or breaking-change policies."
    },
    {
      "id": "project-client-sdk-tooling",
      "title": "Client SDK and Web Client Utilities",
      "summary": "Explain how the project packages reusable HTTP clients and swagger integrations for third-party automation.",
      "category": "development",
      "recommended_sources": ["nifi-commons/nifi-web-client-api/", "nifi-commons/nifi-web-client/"],
      "priority": "medium",
      "tags": ["sdk", "client", "automation"],
      "research_request": "Document available client helpers, authentication support, and extension points for custom tooling."
    },
    {
      "id": "project-distribution-artifacts",
      "title": "Distribution and Assembly Artifacts",
      "summary": "Describe how release assemblies are produced, what modules feed them, and how manifests describe packaged content.",
      "category": "release",
      "recommended_sources": ["nifi-assembly/src/main/assembly/", "nifi-manifest/"],
      "priority": "high",
      "tags": ["assembly", "distribution", "release"],
      "research_request": "Detail assembly descriptors, manifest schemas, and validation steps for building releases."
    },
    {
      "id": "project-containerization-support",
      "title": "Docker and Container Delivery",
      "summary": "Summarize official container images, build workflows, and runtime configuration patterns for Docker deployments.",
      "category": "deployment",
      "recommended_sources": ["nifi-docker/", "nifi-docker/dockerhub/"],
      "priority": "medium",
      "tags": ["docker", "containers", "deployment"],
      "research_request": "Explain build scripts, environment variables, and operational guidance for running NiFi containers."
    },
    {
      "id": "project-configuration-specifications",
      "title": "Configuration Standards and Guidance",
      "summary": "Capture shared configuration conventions, component catalogs, and operator guidance referenced by the project.",
      "category": "operations",
      "recommended_sources": ["docs/components/", "nifi-docs/src/main/asciidoc/administration-guide.adoc"],
      "priority": "high",
      "tags": ["configuration", "operations", "standards"],
      "research_request": "Summarize prescribed configuration defaults, documented component capabilities, and recommended overrides."
    },
    {
      "id": "project-controller-service-development",
      "title": "Controller Service Development Patterns",
      "summary": "Explain how developers build, test, and package controller services across the project.",
      "category": "development",
      "recommended_sources": ["research-docs/controller-services.md", "nifi-docs/src/main/asciidoc/developer-guide.adoc", "nifi-framework-bundle/nifi-framework/nifi-framework-core/"],
      "priority": "medium",
      "tags": ["controller-service", "development", "extension"],
      "research_request": "Document interfaces, lifecycle annotations, and packaging steps for custom controller services."
    },
    {
      "id": "project-parameter-context-governance",
      "title": "Parameter Context Governance",
      "summary": "Describe how parameter contexts are modeled, versioned, and promoted across environments.",
      "category": "operations",
      "recommended_sources": ["nifi-commons/nifi-parameter/", "nifi-docs/src/main/asciidoc/administration-guide.adoc"],
      "priority": "medium",
      "tags": ["parameters", "governance", "configuration"],
      "research_request": "Explain creation, scoping, and automation hooks for parameter contexts in multi-environment flows."
    },
    {
      "id": "project-registry-lifecycle-integration",
      "title": "Registry-Centered Lifecycle Management",
      "summary": "Summarize how NiFi integrates with NiFi Registry for versioned flow promotion, change tracking, and rollback.",
      "category": "lifecycle",
      "recommended_sources": ["nifi-registry/nifi-registry-core/nifi-registry-docs/src/main/asciidoc/user-guide.adoc", "nifi-docs/src/main/asciidoc/walkthroughs.adoc"],
      "priority": "high",
      "tags": ["registry", "lifecycle", "versioning"],
      "research_request": "Describe flow versioning workflows, promotion patterns, and governance controls relying on the registry."
    },
    {
      "id": "project-security-vulnerability-process",
      "title": "Security Response and Disclosure",
      "summary": "Document the project's vulnerability intake, disclosure rules, and supporting authorization frameworks.",
      "category": "security",
      "recommended_sources": ["SECURITY.md", "nifi-framework-bundle/nifi-framework/nifi-authorizer/"],
      "priority": "high",
      "tags": ["security", "vulnerability", "governance"],
      "research_request": "Capture reporting channels, triage expectations, and supporting authorization modules for remediation."
    },
    {
      "id": "project-maven-bom-structure",
      "title": "Bill of Materials and Dependency Governance",
      "summary": "Explain how the BOM modules control dependency versions and align extension builds across the platform.",
      "category": "build",
      "recommended_sources": ["nifi-bom/", "nifi-extension-bom/", "pom.xml"],
      "priority": "medium",
      "tags": ["bom", "dependencies", "build"],
      "research_request": "Describe BOM module roles, update workflows, and policies for adding new third-party libraries."
    },
    {
      "id": "project-release-versioning",
      "title": "Release Versioning and Packaging Process",
      "summary": "Summarize release version strategy, manifest generation, and assembly validation before publication.",
      "category": "release",
      "recommended_sources": ["nifi-assembly/README.md", "nifi-manifest/", "nifi-assembly/src/main/assembly/"],
      "priority": "medium",
      "tags": ["release", "versioning", "packaging"],
      "research_request": "Outline version bump workflow, manifest structure, and checks performed before releasing artifacts."
    },
    {
      "id": "project-code-quality-program",
      "title": "Quality Gates and Continuous Verification",
      "summary": "Describe static analysis, coverage measurement, and CI workflows enforcing project quality.",
      "category": "quality",
      "recommended_sources": ["nifi-code-coverage/", ".github/workflows/code-compliance.yml", ".github/workflows/ci-workflow.yml"],
      "priority": "medium",
      "tags": ["quality", "testing", "ci"],
      "research_request": "Summarize linting, coverage thresholds, and CI job structure that guard code quality."
    },
    {
      "id": "project-c2-edge-management",
      "title": "Command and Control for Edge Agents",
      "summary": "Explain how the C2 modules orchestrate remote agents, deliver updates, and integrate with MiNiFi deployments.",
      "category": "operations",
      "recommended_sources": ["c2/", "minifi/minifi-commons/minifi-commons-framework/"],
      "priority": "medium",
      "tags": ["c2", "edge", "management"],
      "research_request": "Describe the protocol, client implementations, and configuration flows supporting remote agent control."
    },
    {
      "id": "project-documented-components",
      "title": "Component Documentation Pipeline",
      "summary": "Detail how component docs are generated, curated, and synchronized with released bundles.",
      "category": "documentation",
      "recommended_sources": ["docs/components/", "nifi-docs/src/main/asciidoc/user-guide.adoc"],
      "priority": "medium",
      "tags": ["documentation", "components", "process"],
      "research_request": "Explain doc generation tooling, update cadence, and contribution workflows for component docs."
    },
    {
      "id": "project-community-governance",
      "title": "Community and ASF Governance",
      "summary": "Summarize contributor guidelines, licensing obligations, and ASF governance expectations for the project.",
      "category": "governance",
      "recommended_sources": ["README.md", "NOTICE", "LICENSE"],
      "priority": "medium",
      "tags": ["community", "governance", "asf"],
      "research_request": "Capture contributor onboarding paths, code of conduct expectations, and licensing duties."
    },
    {
      "id": "project-developer-onboarding",
      "title": "Developer Onboarding Guides",
      "summary": "Collect the key guides developers use to set up environments, build the codebase, and contribute changes.",
      "category": "development",
      "recommended_sources": ["nifi-docs/src/main/asciidoc/getting-started.adoc", "nifi-docs/src/main/asciidoc/developer-guide.adoc", "AGENTS.md"],
      "priority": "medium",
      "tags": ["onboarding", "developers", "guides"],
      "research_request": "Outline environment prerequisites, build steps, and recommended workflows for new contributors."
    }
  ]
}
