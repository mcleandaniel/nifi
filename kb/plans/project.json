{
  "version": "1",
  "generated_at": "2025-10-18T16:00:00Z",
  "repo_root": ".",
  "scope": "project",
  "topics": [
    {
      "id": "platform-architecture-overview",
      "title": "Platform Architecture Overview",
      "summary": "Describe the end-to-end NiFi platform architecture covering core services, runtime layers, and supporting bundles.",
      "category": "architecture",
      "recommended_sources": [
        "docs/design-log.md",
        "nifi-framework-bundle/",
        "nifi-assembly/src/main/assembly/"
      ],
      "dependencies": [],
      "priority": "high",
      "tags": ["architecture", "runtime", "overview"],
      "research_request": "Produce a comprehensive architecture overview of Apache NiFi, referencing core modules and how the runtime layers interact."
    },
    {
      "id": "component-module-map",
      "title": "Component Module Map",
      "summary": "Document major Maven modules, their responsibilities, and transitive relationships across the project.",
      "category": "architecture",
      "recommended_sources": [
        "pom.xml",
        "nifi-bom/",
        "nifi-framework-bundle/"
      ],
      "dependencies": [],
      "priority": "high",
      "tags": ["modules", "maven", "architecture"],
      "research_request": "Map the key Maven modules in this repository, explaining how each contributes to the overall platform and noting critical dependencies."
    },
    {
      "id": "flow-execution-engine",
      "title": "Flow Execution Engine",
      "summary": "Explain the internals of the FlowFile processing engine including scheduling, prioritization, and back pressure handling.",
      "category": "architecture",
      "recommended_sources": [
        "docs/controller-services-design.md",
        "nifi-framework-bundle/nifi-framework/nifi-framework-core/",
        "nifi-docs/src/main/asciidoc/developer-guide.adoc"
      ],
      "dependencies": [],
      "priority": "high",
      "tags": ["flowfile", "scheduling", "engine"],
      "research_request": "Detail how NiFi's FlowFile execution engine works, emphasizing scheduling, prioritization, and back pressure mechanisms."
    },
    {
      "id": "stateless-runtime-overview",
      "title": "Stateless Runtime Overview",
      "summary": "Summarize the stateless execution mode, deployment options, and limitations relative to the stateful core.",
      "category": "architecture",
      "recommended_sources": [
        "nifi-stateless/",
        "nifi-stateless/nifi-stateless-assembly/README.md",
        "docs/design-log.md"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["stateless", "execution", "architecture"],
      "research_request": "Explain NiFi's stateless runtime offering, how it differs from core NiFi, and the deployment scenarios it targets."
    },
    {
      "id": "site-to-site-topology",
      "title": "Site-to-Site Topology",
      "summary": "Document NiFi site-to-site communications, protocols, and security boundaries for data movement.",
      "category": "architecture",
      "recommended_sources": [
        "nifi-framework-bundle/nifi-framework/nifi-site-to-site/",
        "docs/design-log.md",
        "nifi-docs/src/main/asciidoc/administration-guide.adoc"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["site-to-site", "networking", "architecture"],
      "research_request": "Describe how NiFi site-to-site works, including protocol flows, configuration, and security considerations."
    },
    {
      "id": "extension-bundle-ecosystem",
      "title": "Extension Bundle Ecosystem",
      "summary": "Outline the extension bundle structure, packaging, and extensibility points for processors and controller services.",
      "category": "special",
      "recommended_sources": [
        "nifi-extension-bundles/",
        "nifi-maven-archetypes/",
        "docs/components/README.md"
      ],
      "dependencies": [],
      "priority": "high",
      "tags": ["extensions", "bundles", "nar"],
      "research_request": "Document how NiFi extension bundles are structured, packaged, and developed, including processor and controller service extensibility."
    },
    {
      "id": "data-provenance-lifecycle",
      "title": "Data Provenance Lifecycle",
      "summary": "Explain provenance repository design, storage formats, retention policies, and query capabilities.",
      "category": "data",
      "recommended_sources": [
        "nifi-framework-bundle/nifi-framework/nifi-provenance-repository-bundle/",
        "docs/design-log.md",
        "nifi-docs/src/main/asciidoc/administration-guide.adoc"
      ],
      "dependencies": [],
      "priority": "high",
      "tags": ["provenance", "data", "repository"],
      "research_request": "Describe how NiFi captures, stores, and serves provenance data, including retention and query behavior."
    },
    {
      "id": "registry-integration-patterns",
      "title": "Registry Integration Patterns",
      "summary": "Detail how NiFi integrates with NiFi Registry for flow versioning, promotion, and lifecycle controls.",
      "category": "data",
      "recommended_sources": [
        "docs/design-log.md",
        "nifi-registry/",
        "nifi-docs/src/main/asciidoc/administration-guide.adoc"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["registry", "versioning", "lifecycle"],
      "research_request": "Explain NiFi's integration with NiFi Registry, covering versioned flows, environments, and promotion workflows."
    },
    {
      "id": "flowfile-state-management",
      "title": "FlowFile State Management",
      "summary": "Describe how FlowFiles are stored, checkpointed, and recovered across repositories.",
      "category": "operations",
      "recommended_sources": [
        "nifi-framework-bundle/nifi-framework/nifi-flowfile-repo-serialization/",
        "docs/design-log.md",
        "nifi-docs/src/main/asciidoc/administration-guide.adoc"
      ],
      "dependencies": [],
      "priority": "high",
      "tags": ["flowfile", "state", "repositories"],
      "research_request": "Detail FlowFile repository design, state management, and recovery procedures within NiFi."
    },
    {
      "id": "cluster-coordination-and-ha",
      "title": "Cluster Coordination and HA",
      "summary": "Summarize clustering mechanics, leader election, failover workflows, and distributed state management.",
      "category": "operations",
      "recommended_sources": [
        "nifi-framework-bundle/nifi-framework/nifi-framework-cluster/",
        "docs/design-log.md",
        "nifi-system-tests/nifi-system-test-suite/"
      ],
      "dependencies": [],
      "priority": "high",
      "tags": ["cluster", "ha", "operations"],
      "research_request": "Explain how NiFi implements clustering, leader election, and high availability operations."
    },
    {
      "id": "automation-integration-strategy",
      "title": "Automation Integration Strategy",
      "summary": "Cover how internal automation tooling interacts with NiFi APIs and deployment workflows.",
      "category": "development",
      "recommended_sources": [
        "docs/automation-flow-builder.md",
        "automation/src/",
        "llm-docs/"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["automation", "api", "tooling"],
      "research_request": "Summarize how the automation suite integrates with NiFi APIs for flow management and deployment."
    },
    {
      "id": "build-and-dependency-management",
      "title": "Build and Dependency Management",
      "summary": "Document Maven build workflow, BOM usage, and dependency alignment across modules.",
      "category": "development",
      "recommended_sources": [
        "pom.xml",
        "nifi-bom/",
        "nifi-extension-bom/"
      ],
      "dependencies": [],
      "priority": "high",
      "tags": ["maven", "build", "dependencies"],
      "research_request": "Explain how Maven builds are organized, including BOMs and dependency management strategies."
    },
    {
      "id": "maven-profile-usage",
      "title": "Maven Profile Usage",
      "summary": "Explain Maven profiles, optional modules, and how contributors should invoke them for targeted builds.",
      "category": "development",
      "recommended_sources": [
        "README.md",
        "nifi-assembly/pom.xml",
        "nifi-toolkit/pom.xml"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["maven", "profiles", "build"],
      "research_request": "Document the Maven profiles available in the project and guidance on when to use each."
    },
    {
      "id": "ci-workflows",
      "title": "CI Workflows",
      "summary": "Summarize GitHub Actions workflows, triggers, and gating logic for merges.",
      "category": "development",
      "recommended_sources": [
        ".github/workflows/",
        "codecov.yml",
        "nifi-code-coverage/"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["ci", "github-actions", "quality"],
      "research_request": "Describe the continuous integration workflows, including key jobs, triggers, and quality gates."
    },
    {
      "id": "static-analysis-and-quality",
      "title": "Static Analysis and Quality Controls",
      "summary": "Outline tooling for code quality, style checks, and license compliance.",
      "category": "development",
      "recommended_sources": [
        "checkstyle.xml",
        "pmd-ruleset.xml",
        "nifi-code-coverage/"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["static-analysis", "quality", "compliance"],
      "research_request": "Explain static analysis configuration, including Checkstyle, PMD, and coverage expectations."
    },
    {
      "id": "testing-strategy-overview",
      "title": "Testing Strategy Overview",
      "summary": "Present a holistic testing strategy across unit, integration, and system levels.",
      "category": "testing",
      "recommended_sources": [
        "nifi-system-tests/",
        "nifi-mock/",
        "docs/design-log.md"
      ],
      "dependencies": [],
      "priority": "high",
      "tags": ["testing", "strategy", "quality"],
      "research_request": "Summarize the end-to-end testing strategy across unit, integration, and system suites."
    },
    {
      "id": "unit-testing-tooling",
      "title": "Unit Testing Tooling",
      "summary": "Detail frameworks, harnesses, and utilities used for JVM unit tests.",
      "category": "testing",
      "recommended_sources": [
        "nifi-mock/",
        "nifi-framework-bundle/nifi-framework/nifi-mock-authorizer/",
        "pom.xml"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["unit-tests", "mocking", "jvm"],
      "research_request": "Document available unit testing tooling and guidelines for writing new tests."
    },
    {
      "id": "integration-test-environments",
      "title": "Integration Test Environments",
      "summary": "Describe integration test fixtures, dockerized dependencies, and environment variables.",
      "category": "testing",
      "recommended_sources": [
        "nifi-system-tests/nifi-system-test-suite/",
        "nifi-docker/",
        "docs/design-log.md"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["integration", "docker", "env"],
      "research_request": "Explain how integration tests are structured, including dockerized services and configuration requirements."
    },
    {
      "id": "system-tests-and-benchmarks",
      "title": "System Tests and Benchmarks",
      "summary": "Summarize large-scale system tests and performance benchmarking practices.",
      "category": "testing",
      "recommended_sources": [
        "nifi-system-tests/",
        "docs/design-log.md",
        "nifi-code-coverage/"
      ],
      "dependencies": [],
      "priority": "low",
      "tags": ["system-tests", "performance", "benchmark"],
      "research_request": "Describe system-level tests and any performance benchmarking harnesses in the repository."
    },
    {
      "id": "security-model-overview",
      "title": "Security Model Overview",
      "summary": "Explain the overarching security architecture including authentication, authorization, and encryption layers.",
      "category": "security",
      "recommended_sources": [
        "SECURITY.md",
        "nifi-framework-bundle/nifi-framework/nifi-kerberos-iaa-providers-bundle/",
        "nifi-docs/src/main/asciidoc/administration-guide.adoc"
      ],
      "dependencies": [],
      "priority": "high",
      "tags": ["security", "auth", "architecture"],
      "research_request": "Produce an overview of NiFi's security architecture across authentication, authorization, and encryption."
    },
    {
      "id": "identity-and-access-control",
      "title": "Identity and Access Control",
      "summary": "Detail user provisioning, authorizers, policies, and integration with external identity providers.",
      "category": "security",
      "recommended_sources": [
        "nifi-framework-bundle/nifi-framework/nifi-framework-authorization/",
        "nifi-framework-bundle/nifi-framework/nifi-ldap-iaa-providers-bundle/",
        "nifi-docs/src/main/asciidoc/administration-guide.adoc"
      ],
      "dependencies": [],
      "priority": "high",
      "tags": ["authentication", "authorization", "identity"],
      "research_request": "Explain how NiFi handles identity, role mapping, and external authorization providers."
    },
    {
      "id": "tls-and-cryptography",
      "title": "TLS and Cryptography",
      "summary": "Describe TLS configuration, keystore/truststore management, and encryption-in-transit policies.",
      "category": "security",
      "recommended_sources": [
        "nifi-framework-bundle/nifi-framework/nifi-kerberos-iaa-providers-bundle/",
        "nifi-framework-bundle/nifi-framework/nifi-resources/src/main/resources/conf/",
        "nifi-docs/src/main/asciidoc/administration-guide.adoc"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["tls", "encryption", "security"],
      "research_request": "Document TLS configuration and cryptographic material management for NiFi deployments."
    },
    {
      "id": "secret-handling-and-keystore-management",
      "title": "Secret Handling and Keystore Management",
      "summary": "Explain how sensitive configuration is stored, externalized, and rotated across environments.",
      "category": "security",
      "recommended_sources": [
        "nifi-framework-bundle/nifi-framework/nifi-resources/src/main/resources/conf/",
        "docs/design-log.md",
        "nifi-docs/src/main/asciidoc/administration-guide.adoc"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["secrets", "keystore", "security"],
      "research_request": "Describe strategies for managing NiFi secrets, keystores, and sensitive properties."
    },
    {
      "id": "deployment-packaging-artifacts",
      "title": "Deployment Packaging Artifacts",
      "summary": "Catalog binary distributions, NAR assemblies, and release packaging outputs.",
      "category": "deployment",
      "recommended_sources": [
        "nifi-assembly/",
        "nifi-assembly/src/main/assembly/",
        "nifi-manifest/"
      ],
      "dependencies": [],
      "priority": "high",
      "tags": ["packaging", "nar", "distribution"],
      "research_request": "Document the deployment artifacts produced by builds, including assemblies and manifests."
    },
    {
      "id": "docker-and-container-images",
      "title": "Docker and Container Images",
      "summary": "Explain Docker image build process, configuration, and tagging conventions.",
      "category": "deployment",
      "recommended_sources": [
        "nifi-docker/",
        "nifi-docker/dockerhub/",
        "docs/design-log.md"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["docker", "containers", "deployment"],
      "research_request": "Describe how NiFi Docker images are built, configured, and versioned."
    },
    {
      "id": "kubernetes-and-cloud-ops",
      "title": "Kubernetes and Cloud Operations",
      "summary": "Summarize Kubernetes bundle content, operator expectations, and cloud deployment guidance.",
      "category": "deployment",
      "recommended_sources": [
        "nifi-framework-bundle/nifi-framework-extensions/nifi-framework-kubernetes-bundle/",
        "nifi-docker/",
        "docs/design-log.md"
      ],
      "dependencies": [],
      "priority": "low",
      "tags": ["kubernetes", "cloud", "deployment"],
      "research_request": "Explain available Kubernetes resources and recommended cloud deployment practices for NiFi."
    },
    {
      "id": "runtime-observability",
      "title": "Runtime Observability",
      "summary": "Describe metrics, provenance queries, and health endpoints available for monitoring NiFi.",
      "category": "operations",
      "recommended_sources": [
        "nifi-framework-bundle/nifi-framework/nifi-framework-status-history-shared/",
        "docs/design-log.md",
        "nifi-docs/src/main/asciidoc/administration-guide.adoc"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["observability", "metrics", "operations"],
      "research_request": "Summarize observability features including metrics, health checks, and provenance-driven monitoring."
    },
    {
      "id": "logging-and-monitoring",
      "title": "Logging and Monitoring",
      "summary": "Explain logging configuration, log repository structure, and integration with external monitoring systems.",
      "category": "operations",
      "recommended_sources": [
        "nifi-framework-bundle/nifi-framework/nifi-resources/src/main/resources/conf/",
        "nifi-docs/src/main/asciidoc/administration-guide.adoc",
        "nifi-docker/"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["logging", "monitoring", "operations"],
      "research_request": "Document logging configuration and best practices for forwarding NiFi logs to monitoring systems."
    },
    {
      "id": "backup-and-disaster-recovery",
      "title": "Backup and Disaster Recovery",
      "summary": "Cover repository backup procedures, recovery sequencing, and disaster scenarios.",
      "category": "operations",
      "recommended_sources": [
        "nifi-docs/src/main/asciidoc/administration-guide.adoc",
        "docs/design-log.md",
        "nifi-framework-bundle/nifi-framework/nifi-flowfile-repo-serialization/"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["backup", "dr", "operations"],
      "research_request": "Explain how to back up and restore NiFi repositories and handle disaster recovery scenarios."
    },
    {
      "id": "upgrade-and-migration",
      "title": "Upgrade and Migration",
      "summary": "Document upgrade planning, compatibility, and migration steps between releases.",
      "category": "operations",
      "recommended_sources": [
        "nifi-docs/src/main/asciidoc/administration-guide.adoc",
        "nifi-manifest/",
        "docs/design-log.md"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["upgrade", "migration", "operations"],
      "research_request": "Detail NiFi upgrade procedures, compatibility considerations, and migration guidance."
    },
    {
      "id": "ui-architecture-alignment",
      "title": "UI Architecture Alignment",
      "summary": "Summarize how the NiFi UI aligns with backend capabilities and exposes runtime controls.",
      "category": "ui",
      "recommended_sources": [
        "nifi-frontend/src/main/frontend/apps/nifi/",
        "nifi-framework-bundle/nifi-framework/nifi-web/",
        "docs/design-log.md"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["ui", "frontend", "integration"],
      "research_request": "Describe the architecture of the NiFi UI and how it interacts with backend services."
    },
    {
      "id": "documentation-standards",
      "title": "Documentation Standards",
      "summary": "Capture documentation structure, preferred formats, and publishing workflows.",
      "category": "meta",
      "recommended_sources": [
        "nifi-docs/src/main/asciidoc/",
        "docs/",
        "AGENTS.md"
      ],
      "dependencies": [],
      "priority": "low",
      "tags": ["docs", "standards", "meta"],
      "research_request": "Outline the documentation framework, formats, and publishing pipeline for project docs."
    },
    {
      "id": "glossary-and-domain-language",
      "title": "Glossary and Domain Language",
      "summary": "Compile key NiFi terms, acronyms, and domain-specific language for contributors.",
      "category": "meta",
      "recommended_sources": [
        "nifi-docs/src/main/asciidoc/",
        "docs/flow-spec-structure.md",
        "research-docs/"
      ],
      "dependencies": [],
      "priority": "low",
      "tags": ["glossary", "terminology", "meta"],
      "research_request": "Create a glossary of NiFi terminology and acronyms grounded in existing documentation."
    },
    {
      "id": "community-governance",
      "title": "Community Governance",
      "summary": "Describe ASF governance, contribution requirements, and project decision-making processes.",
      "category": "governance",
      "recommended_sources": [
        "README.md",
        "NOTICE",
        "docs/design-log.md"
      ],
      "dependencies": [],
      "priority": "low",
      "tags": ["governance", "community", "asf"],
      "research_request": "Summarize governance and contribution expectations for the Apache NiFi community."
    },
    {
      "id": "release-versioning-and-roadmap",
      "title": "Release Versioning and Roadmap",
      "summary": "Outline versioning strategy, release cadence, and roadmap communication channels.",
      "category": "governance",
      "recommended_sources": [
        "docs/design-log.md",
        "nifi-manifest/",
        "README.md"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["releases", "roadmap", "governance"],
      "research_request": "Document how releases are versioned, scheduled, and communicated to stakeholders."
    },
    {
      "id": "compliance-and-audit-trails",
      "title": "Compliance and Audit Trails",
      "summary": "Explain auditing capabilities, provenance usage for compliance, and policy enforcement hooks.",
      "category": "governance",
      "recommended_sources": [
        "nifi-framework-bundle/nifi-framework/nifi-user-actions/",
        "docs/design-log.md",
        "nifi-docs/src/main/asciidoc/administration-guide.adoc"
      ],
      "dependencies": [],
      "priority": "medium",
      "tags": ["audit", "compliance", "governance"],
      "research_request": "Describe how NiFi supports compliance through audit logs, provenance, and policy enforcement."
    }
  ]
}
